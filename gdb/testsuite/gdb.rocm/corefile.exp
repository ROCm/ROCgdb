# Copyright (C) 2023 Free Software Foundation, Inc.
# Copyright (C) 2023 Advanced Micro Devices, Inc. All rights reserved.

# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# This test checks that GDB can generate a corefile for a HIP program and
# reload it afterwards.

load_lib rocm.exp

require allow_hipcc_tests

standard_testfile .cpp

if { [build_executable "failed to prepare"  ${testfile} ${srcfile} \
	{debug hip}] } {
    return -1
}

proc do_test {} {
  clean_restart $::binfile

  if { ![runto_main] } {
    fail "can't run to main"
    return
  }

  gdb_breakpoint "bar" allow-pending
  gdb_breakpoint "baz" allow-pending

  gdb_continue_to_breakpoint "break in device"

  set num_host_threads 0
  set gpu_thread_ids [list]
  gdb_test_multiple "info threads" "capture thread state" -lbl {
    -re "$::decimal *Thread\[^\\n\]*" {
      incr num_host_threads
      exp_continue
    }
    -re "($::decimal) *AMDGPU Wave\[^\\n\]*" {
      lappend gpu_thread_ids $expect_out(1,string)
      exp_continue
    }
    -re "$::gdb_prompt " {
      # We should have exactly 4 GPU threads.
      gdb_assert {[llength $gpu_thread_ids] == 4} $gdb_test_name
    }
  }

  set wave_pcs [list]
  gdb_test_multiple "thread apply $gpu_thread_ids -- p/x \$pc" "capture GPU pcs" -lbl {
    -re ".*Thread \$::decimal\[^\\n\]*" {
      exp_continue
    }
    -re "$::decimal = ($::hex)" {
      lappend wave_pcs $expect_out(1,string)
      exp_continue
    }
    -re "$::gdb_prompt " {
      gdb_assert {[llength $wave_pcs] == [llength $gpu_thread_ids]} $gdb_test_name
    }
  }

  set corefile_path [standard_output_file "generated-core"]
  if {![rocm_generate_core_file $corefile_path]} {
    return
  }

  # Reload the corefile.
  clean_restart $::binfile
  gdb_test "core-file $corefile_path" "Core was generated by.*" \
    "reload corefile"

  set num_core_host_threads 0
  set gpu_core_thread_ids [list]
  gdb_test_multiple "info threads" "" -lbl {
    -re "$::decimal *Thread\[^\\n\]*" {
      incr num_core_host_threads
      exp_continue
    }
    -re "($::decimal) *AMDGPU Wave\[^\\n\]*" {
      lappend gpu_core_thread_ids $expect_out(1,string)
      exp_continue
    }
    -re "$::gdb_prompt " {
      gdb_assert {[expr {[llength $gpu_core_thread_ids] == [llength $gpu_thread_ids]
			 && $num_host_threads == $num_core_host_threads}]} $gdb_test_name
    }
  }

  gdb_test_multiple "thread apply $gpu_core_thread_ids -- p/x \$pc" \
		    "core wave PCs match live wave PCs" -lbl {
    -re ".*Thread \$::decimal\[^\\n\]*" {
      exp_continue
    }
    -re "$::decimal = ($::hex)" {
      set idx [lsearch -exact $wave_pcs $expect_out(1,string)]
      if { $idx != -1 } {
	set wave_pcs [lreplace $wave_pcs $idx $idx]
      }
      exp_continue
    }
    -re "$::gdb_prompt " {
      gdb_assert {[llength $wave_pcs] == 0} $gdb_test_name
    }
  }
}

with_rocm_gpu_lock {
  do_test
}
