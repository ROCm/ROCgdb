# Copyright (C) 2021-2022 Advanced Micro Devices, Inc. All rights reserved.

# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test that when "amdgpu precise-memory" is off, hitting a watchpoint shows a
# warning about the stop location maybe being inaccurate.

load_lib rocm.exp

if { ![istarget "*-linux*"] } then {
    continue
}

standard_testfile .cpp

if [skip_hipcc_tests] {
    verbose "Skipping hip test: ${testfile}."
    return
}

if {[build_executable "failed to prepare" $testfile $srcfile {debug hip}]} {
    return
}

proc do_test { } {
    clean_restart $::binfile

    with_rocm_gpu_lock {
	if ![runto kernel allow-pending qualified] {
	    fail "can't run to main"
	    return
	}

	set var_address ""

	# TODO: Compiler currently describes all memory location
	# descriptions for global variables as addresses in the
	# generic address space, insted of the addresses in the
	# global address space.  One such case is the location
	# of the variable 'global' which is currently handled as
	# a separate patern case and should be removed once the
	# location description for global variables is described
	# using the addresses in the global memory address space.
	gdb_test_multiple "print &global" "" {
	  -re "\\\$${::decimal} = \\(.*\\) (${::hex}).*" {
	    set var_address $expect_out(1,string)
	    pass $gdb_test_name
	  }
	  -re "\\\$${::decimal} = \\(.*\\) generic#(${::hex}).*" {
	    set var_address $expect_out(1,string)
	    pass $gdb_test_name
	  }
	}

	gdb_test "watch *((int *) $var_address)" \
	    "Hardware watchpoint $::decimal: .*" \
	    "insert watchpoint"

	gdb_test "continue" \
	    "Warning: precise memory signal reporting is not enabled.*hit Hardware watchpoint $::decimal.*" \
	    "continue to watchpoint"
    }
}

do_test
