# Copyright (C) 2021-2022 Advanced Micro Devices, Inc. All rights reserved.

# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Verify that when stepping with schedlock on (only the stepped wave should
# run), we don't have a spurious stop in newly created waves.  The test scenario
# is:
#
#   - Start a background process to hog some GPU resources
#   - Start an inferior in GDB.  Not all of its waves are created because of the
#     hogging process.
#   - Stop the hogging process.
#   - Step a wave of the inferior.  A faulty GDB would present a stop in a
#     newly created wave.

# This test is disabled because it can't work reliably until the multi-process
# dispatch problems are fixed.  See:
#
#   https://ontrack-internal.amd.com/browse/SWDEV-307156
untested "test disabled"
return

load_lib rocm.exp

standard_testfile .cpp hog.cpp

set binfile_hog ${binfile}-hog

if {[build_executable "failed to prepare main file" ${binfile} ${srcfile} {debug hip}]} {
    return
}

if {[build_executable "failed to prepare hog file" ${binfile_hog} ${srcfile2} {debug hip}]} {
    return
}

proc do_test {} {
    with_rocm_gpu_lock {
	clean_restart $::binfile

	if { ![runto_main] } {
	    return
	}

	set hog_pid [spawn ${::binfile_hog}]
	if { $hog_pid == 0 } {
	    fail "start hog"
	    return
	}

	set hog_spawn_id $spawn_id
	verbose -log "spawned hog as pid $hog_pid, spawn id $spawn_id"

	gdb_breakpoint bit_extract_kernel allow-pending

	# On gfx90a / MI200, running the kernel while the hog process runs
	# hangs, not much we can do here.
	if { [hcc_amdgpu_target] == "gfx90a" } {
	    setup_xfail "*-*-*"
	}
	set res [gdb_test "continue" "Thread $::decimal .* hit Breakpoint $::decimal.*"]
	close -i $hog_spawn_id
	if { $res != 0 } {
	    return
	}

	delete_breakpoints

	set count [info_threads_get_wave_count 1]
	verbose -log "Inferior 1 has $count waves"

	set cur_thread ""
	gdb_test_multiple "thread" "" {
	    -re -wrap "Current thread is ($::decimal), .*" {
		set cur_thread $expect_out(1,string)
		pass $gdb_test_name
	    }
	}

	gdb_test_no_output "set scheduler-locking on"

	# "next" a few times.  Verify that we don't get a stop in another thread
	# (the only printed line is the source line number and the source line).
	set num_nexts 5
	for {set i 0} {$i < 5} {incr i} {
	    gdb_test "next" "^next\r\n${::decimal}\[^\r\n\]+" \
		"next, iter $i"
	}

	gdb_test "thread" "Current thread is $cur_thread, .*" \
	    "current thread has not changed while next'ing"
    }
}

do_test
