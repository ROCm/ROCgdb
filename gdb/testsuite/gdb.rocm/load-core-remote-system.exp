# Copyright 2024 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test exercises opening a core dump when binaries containing code
# objects are not available at the path they were during runtime.  This
# usually happens when opening a core dump on a different host.  To allow
# GDB to locate the files containing the GPU code objects, the user can
# use either "set sysroot" or "set solib-search-path".
#
# This is to test if "file://" code objects are properly located by
# solib-rocm.c.  Note that there is no guarantee that the code object will be
# loaded with a file:// style URI, but using memory:// style code objects
# should not cause this test to fail, so we do not explicitly check that
# any GPU code object is loaded using a "file://" pattern.

load_lib rocm.exp

require allow_hipcc_tests {!is_remote host}

standard_testfile .cpp

if {[build_executable "failed to prepare" $testfile $srcfile {debug hip}]} {
    return
}

# Gives the path where file originally at path PATH needs to be placed in
# a sysroot located at SYSROOT_BASE.
# For example:
#   % sysroot_path /tmp/sysroot /foo/bar/baz
#   /tmp/sysroot/foo/bar/baz
#   % file normalize .
#   /home/foo/bar/baz
#   % sysroot_path /tmp/sysroot foo
#   /tmp/sysroot/home/foo/bar/baz/foo
proc sysroot_path {sysroot_base path} {
    return [file join $sysroot_base {*}[lrange [file split [file normalize $path]] 1 end]]
}

proc do_test {} {
    # First, create a core dump of GPU process.
    set corefile_path $::binfile.core
    save_vars { ::env(HSA_LOADER_ENABLE_MMAP_URI) } {
	setenv HSA_LOADER_ENABLE_MMAP_URI 1
	clean_restart $::binfile

	with_rocm_gpu_lock {
	    if ![runto do_an_addition allow-pending message] {
		return
	    }

	    if {![rocm_generate_core_file $corefile_path]} {
		return
	    }
	}
    }

    # Create the structure for a sysroot and copy the binfile there.
    set sysroot_base [standard_output_file "sysroot"]
    file mkdir [sysroot_path $sysroot_base $sysroot_base]
    file copy $::binfile [sysroot_path $sysroot_base $::binfile]

    # Place a copy of the binfile where we will look for it using
    # solib-search-path.
    set solib_search_path [standard_output_file "solibs"]
    file mkdir $solib_search_path
    file copy "$::binfile" $solib_search_path

    # Be sure the file is not at its original location.
    file rename $::binfile "$::binfile-ref"

    # Open the core dump using "set sysroot"
    with_test_prefix "sysroot" {
	clean_restart
	gdb_test_no_output "set sysroot $sysroot_base" "set sysroot"
	gdb_test "core-file $corefile_path" "Core was generated by.*" "open corefile"
	gdb_test "info threads" "AMDGPU Wave 1:1:1:1 \\(0,0,0\\)/0\\s+do_an_addition.*"
    }

    # Open the core dump using "set solib-search-path"
    with_test_prefix "solib-search-path" {
	clean_restart
	gdb_test_no_output "set solib-search-path $solib_search_path" "set solib-search-path"
	gdb_test "core-file $corefile_path" "Core was generated by.*" "open corefile"
	gdb_test "info threads" "AMDGPU Wave 1:1:1:1 \\(0,0,0\\)/0\\s+do_an_addition.*"
    }
}

do_test
