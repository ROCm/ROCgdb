# Copyright (C) 2024 Free Software Foundation, Inc.

# This file is part of GDB.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This test checks that when GDB opens an AMDGPU core dump, it does not
# try to open special files such as /dev/kfd even if it was mmapped in
# the process's address space.

load_lib rocm.exp

require allow_hipcc_tests

standard_testfile .cpp

if { [build_executable "failed to prepare"  ${testfile} ${srcfile} \
	{debug hip}] } {
    return -1
}

proc do_test {} {
  clean_restart $::binfile

  if { ![runto kern allow-pending message] } {
    return
  }

  set corefile_path [standard_output_file "generated-core"]
  if {![rocm_generate_core_file $corefile_path]} {
    return
  }

  # Load the corefile.
  clean_restart $::binfile
  gdb_test "core-file $corefile_path" "Core was generated by.*" \
    "load corefile"

  set kfd_load_address ""
  gdb_test_multiple "thread apply 1 -- info proc mappings" "" -lbl {
    -re ".*($::hex)\\s+($::hex)\\s+($::hex)\\s+($::hex)\\s+/dev/kfd" {
      set kfd_load_address $expect_out(1,string)
      verbose -log "/dev/kfd -> $kfd_load_address"
      exp_continue
    }
    -re -wrap "" {
      gdb_assert {$kfd_load_address != ""}
    }
  }

  # Normalize the address (i.e. 0x00deadbeef -> 0xdeadbeef) to match GDB's
  # output.
  set addr [get_valueof "/x" "$kfd_load_address" "0x0" "normalize load address"]

  gdb_test "x $kfd_load_address" \
	   ".*Cannot access memory at address $addr.*" \
	   "cannot read from /dev/kfd"
}

with_rocm_gpu_lock {
  do_test
}
