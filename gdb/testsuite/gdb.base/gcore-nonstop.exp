# Copyright 2022-2023 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# This testcase checks that when in non-stop mode with some threads running
# the gcore command can interrupt all threads, generate a core dump and
# restart threads as required.

standard_testfile

if { [prepare_for_testing "failed to prepare" \
	${testfile} ${srcfile} {pthreads debug}] } {
    return
}

proc_with_prefix do_test { selected_thread } {
    save_vars { ::GDBFLAGS } {
	append ::GDBFLAGS " -ex \"set non-stop on\""
	clean_restart ${::binfile}
    }

    if { ![runto "started"] } {
	return
    }

    # We should be stopped in thread 1 while thread 2 is running.
    gdb_test_sequence "info threads" "info threads" {
	{Id\s+Target Id\s+Frame}
	{\*\s+1[^\n]*\n}
	{\s+2\s+[^\n]*\(running\)[^\n]*\n}
    }

    set th1_pc ""
    gdb_test_multiple "p/x \$pc" "fetch thread 1 PC" {
	-wrap -re "$::decimal = ($::hex)" {
	    set th1_pc $expect_out(1,string)
	    pass $gdb_test_name
	}
    }


    gdb_test "thread $selected_thread" "\\\[Switching to thread $selected_thread.*"

    set corefile [standard_output_file "corefile-$selected_thread"]
    if {![gdb_gcore_cmd $corefile "generate corefile"]} {
	# gdb_gcore_cmd issues "UNSUPPORTED".
	return
    }

    if {$selected_thread == 1} {
	set info_thread1 {\*\s+1}
	set info_thread2 {\s+2}
    } else {
	set info_thread1 {\s+1}
	set info_thread2 {\*\s+2}
    }
    # After the core file is generated, thread 2 should be back running
    # and SELECTED_THREAD should still be selected.
    gdb_test_sequence \
	"info threads" \
	"correct thread selection after gcore" \
	[list \
	   {Id\s+Target Id\s+Frame} \
	   "$info_thread1\[^\\n\]*\\n" \
	   "$info_thread2\[^\\n\]*\\n" ]

    # Thread 1 is at the same stop it was before calling the gcore command.
    gdb_test "thread apply 1 -q -- p/x \$pc" "\\\$$::decimal = $th1_pc" "thread 1 unchanged"

    clean_restart $::binfile
    gdb_test "core-file $corefile" "Core was generated by.*" "load corefile"

    # The core file has the 2 threads.
    gdb_test_sequence "info threads" "threads in corefile" {
	{Id\s+Target Id\s+Frame}
	{\s+1\s+Thread[^\n]*\n}
	{\s+2\s+Thread[^\n]*\n}
    }
}

foreach_with_prefix selected_thread {1 2} {
    do_test $selected_thread
}
