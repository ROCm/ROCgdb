# Copyright 2022 Free Software Foundation, Inc.

# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

# Test parsing numbers.  Several language parsers had the same bug
# around parsing large 64-bit numbers, hitting undefined behavior, and
# thus crashing a GDB built with UBSan.  This testcase goes over all
# languages exercising printing the max 64-bit number, making sure
# that GDB doesn't crash.

proc test_parse_numbers {} {
    clean_restart

    set all_languages [get_set_option_choices "set language"]
    foreach_with_prefix lang $all_languages {
	gdb_test_no_output "set language $lang"

	set val "0xffffffffffffffff"
	if {$lang == "fortran"} {
	    gdb_test "p/x $val" " = 0xffffffff"
	    gdb_test "ptype $val" " = unsigned int"
	} elseif {$lang == "modula-2"} {
	    gdb_test "p/x 0FFFFFFFFFFFFFFFFH" "Overflow on numeric constant\\."
	} elseif {$lang == "unknown"} {
	    gdb_test "p/x $val" \
		"expression parsing not implemented for language \"Unknown\""
	} else {
	    gdb_test "p/x $val" " = $val"
	    if {$lang == "ada"} {
		gdb_test "ptype $val" " = <8-byte integer>"
	    } elseif {$lang == "d"} {
		gdb_test "ptype $val" " = ulong"
	    } elseif {$lang == "rust"} {
		gdb_test "ptype $val" " = i64"
	    } else {
		gdb_test "ptype $val" " = unsigned long long"
	    }
	}
    }
}

test_parse_numbers
